# Use an official Ubuntu as a base image
FROM ubuntu:latest

# Set non-interactive mode for installation to avoid prompts
ENV DEBIAN_FRONTEND=noninteractive

# Set up environment variables
ENV LEDA_VERSION=7.1

# Install necessary packages
RUN apt-get update && apt-get install -y \
    build-essential \
    wget \
    unzip \
    cmake \
    libboost-all-dev \
    libssl-dev \
    libx11-dev \
    libxft-dev \
    yasm \
    python3 \
    python3-pip \
    python3-venv \
    && rm -rf /var/lib/apt/lists/*

# Use pipx to install tabulate in an isolated environment
RUN python3 -m venv /opt/venv

# Install Python package 'tabulate' in the virtual environment
RUN /opt/venv/bin/pip install tabulate

# Copy LEDA and CSV files from the host's Downloads folder into the Docker container
# Replace '/path/to' with the actual path on your host machine.
# The Docker build command should be executed from the directory where the Dockerfile resides.
COPY ./LEDA /opt/LEDA
COPY test_sub/*.csv /data/csv_files/
COPY test_sub/accuracies/*.csv /data/csv_files/accuracies/

# Set LEDA environment variables if needed
ENV LEDA_HOME=/opt/LEDA
ENV PATH="${PATH}:${LEDA_HOME}/bin"
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LEDA_HOME}/lib"

# Navigate to LEDA directory and configure it
# WORKDIR /opt/LEDA

# Configure and build LEDA
# RUN ./lconfig g++ static

# Run the build script
# RUN chmod +x build.sh && /bin/bash ./build.sh
# make CFLAGS="-Wall -Wno-unused -Wno-error=uninitialized -Wno-error=maybe-uninitialized -DWORD_LENGTH_64"

# List contents of /opt/LEDA/lib to see the available libraries
# RUN ls -l /opt/LEDA

# Create a directory for the C++ project
WORKDIR /usr/src/app

# Sample code (program.cpp) - modify with the actual C++ code
COPY ./test_leda.cpp .
COPY ./test_leda_rational.cpp .
COPY ./test_leda_rational_f.cpp .
COPY ./tester.py .
COPY ./distancer.py .

# Compile the C++ program with LEDA
RUN g++ -o test_leda_ud test_leda.cpp -I${LEDA_HOME}/incl -L${LEDA_HOME} -lleda
RUN g++ -o test_leda_ur test_leda_rational.cpp -I${LEDA_HOME}/incl -L${LEDA_HOME} -lleda
# RUN g++ -o test_leda_ur_f test_leda_rational_f.cpp -I${LEDA_HOME}/incl -L${LEDA_HOME} -lleda

# Run tests using the CSV files
CMD ["/opt/venv/bin/python", "tester.py", "-f", "/data/csv_files", "-c", "./test_leda,./test_leda_r", "-a", "/data/csv_files/accuracies"]

# docker build -t leda_cpp_csv_tester .
# docker build --no-cache -t leda_cpp_csv_tester .
# docker run -it --rm leda_cpp_csv_tester /bin/bash
# docker ps
# docker cp <containerId>:/usr/src/app/file.csv ./leda_res
# /opt/venv/bin/python tester.py -f /data/csv_files -a /data/csv_files/accuracies -c ./test_leda_ud,./test_leda_ur


#docker cp d72312639732:/usr/src/app/distances.csv /Users/xyz/PycharmProjects/SegGen/leda_distances.csv && \
#docker cp d72312639732:/usr/src/app/memory_usage.csv /Users/xyz/PycharmProjects/SegGen/leda_memory_usage.csv && \
#docker cp d72312639732:/usr/src/app/results.csv /Users/xyz/PycharmProjects/SegGen/leda_results.csv && \
#docker cp d72312639732:/usr/src/app/time_taken.csv /Users/xyz/PycharmProjects/SegGen/leda_time_taken.csv

# docker cp dfef351740ce:/usr/src/app/distances.csv /Users/xyz/PycharmProjects/SegGen/leda_distances.csv
# docker cp dfef351740ce:/usr/src/app/memory_usage.csv /Users/xyz/PycharmProjects/SegGen/leda_memory_usage.csv
# docker cp dfef351740ce:/usr/src/app/results.csv /Users/xyz/PycharmProjects/SegGen/leda_results.csv
# docker cp dfef351740ce:/usr/src/app/time_taken.csv /Users/xyz/PycharmProjects/SegGen/leda_time_taken.csv
